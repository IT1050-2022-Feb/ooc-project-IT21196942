
//class Student ;
class Student: public User{
   private:
       	string studentId;
       	string studentName;
       	int studentNIC;
       	string studentDateOfBirth;
       	string moduleName;
       	string attendDate;
       	int studentQuestionNo;
		    Course *course;//BI-DIRECTIONAL ASSOCIATION
       	
   public:
   		Student();
    	Student(string s_id, string s_name, int s_nic, string s_dob,Course *c,string em, string pswd,Register *rg,UserActivity *ua:):User(em,pswd,*rg,*ua);
        void displayStudentDetails();
        void markStudentParticipation(string s_id, string s_name, int s_nic,string m_name, string a_date);
        void askQuestions(string s_id, string s_name, string stq_no,Support *sp);
        ~Student();

};
//class Exam;
class Exam{
    private:
        string examId;
        string examName;
        string examType;
        char grade;
        string examDate;
     
    public:
    	Exam();
        Exam(string e_id, string e_name, string e_type, string e_date);
        void setExamGrade(string e_id,string e_name, char gr,Course *c);
        void getExamParticipation();
        void displayExamDetails();
        void displayExamGrade();
        ~Exam();
};

//class Exam
Exam::Exam(string e_id, string e_name, string e_type, string e_date){
	examId = e_id;
    examName = e_name;
    examType = e_type;
    examDate = e_date;
}
void Exam::setExamGrade(string e_id,string e_name, char gr,Course *c){
	examId = e_id;
    examName = e_name;
    grade = gr;
  cour = c;
}
void Exam::getExamParticipation(){}
void Exam::displayExamDetails(){
	cout<<"Exam ID: "<<examId<<endl;
	cout<<"Exam Name: "<<examName<<endl;
	cout<<"Exam type: "<<examType<<endl;
	cout<<"Exam Date: "<<examDate<<endl;
}
void Exam::displayExamGrade(){
	cout<<"Exam ID: "<<examId<<endl;
	cout<<"Exam Name: "<<examName<<endl;
	cout<<"Grade: "<<grade<<endl;
}
Exam::~Exam(){}

//class Student
Student::Student(string s_id, string s_name, int s_nic, string s_dob,Course *c,string em, string pswd,Register *rg,UserActivity *ua:):User(em,pswd,*rg,*ua){
	studentId = s_id;
    studentName = s_name;
    studentNIC = s_nic;
    studentDateOfBirth = s_dob;
  cour = c;
}
void Student::displayStudentDetails(){
	cout<<"Student ID: "<<studentId<<endl;
	cout<<"Student Name: "<<studentName<<endl;
	cout<<"Student NIC: "<<studentNIC<<endl;
	cout<<"Student Date of Birth: "<<studentDateOfBirth<<endl;
}
void Student::markStudentParticipation(string s_id, string s_name, int s_nic,string m_name, string a_date){}
void Student::askQuestions(string s_id, string s_name, string stq_no,Support *sp){}
Student::~Student(){}


 //constractor Exam
  Exam *e1 = new Exam("E0001","Spot test","Written","2022-10-02");
    e1->setExamGrade(string e_id,string e_name, char gr,Course *c);
    e1-> getExamParticipation();
    e1-> displayExamDetails();
    e1-> displayExamGrade();
  Exam *e2 = new Exam("E0002","Quiz","Online","2022-07-15");
    e2->setExamGrade(string e_id,string e_name, char gr,Course *c);
    e2-> getExamParticipation();
    e2-> displayExamDetails();
    e2-> displayExamGrade();
  
       //constractor Exam
  Exam *e1 = new Exam("E0001","Spot test","Written","2022-10-02");
    e1->setExamGrade(string e_id,string e_name, char gr,Course *c);
    e1-> getExamParticipation();
    e1-> displayExamDetails();
    e1-> displayExamGrade();
  Exam *e2 = new Exam("E0002","Quiz","Online","2022-07-15");
    e2->setExamGrade(string e_id,string e_name, char gr,Course *c);
    e2-> getExamParticipation();
    e2-> displayExamDetails();
    e2-> displayExamGrade();
  
